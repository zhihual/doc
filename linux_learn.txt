2015-12-8
Hello word to study linux
Linux need write more logs since it's doc so much, but, not well organized like windows MSDN.
More detial need self save and keep record. 
En, a little bit slowly, but, not bad.:(

Put one good learning website link here:
http://blog.jobbole.com/25877/
http://www.tutorialspoint.com/unix_system_calls/getpid.htm  linux command
http://blog.chinaunix.net/uid-25014876-id-59415.html
http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000

Github https link

https://github.com/zhihual/doc.git

2015-12-9
http://www.runoob.com/python/python-variable-types.html python guide website

Config git global settings

git config --global user.name "YOUR NAME"
git config --global user.email "YOUR EMAIL ADDRESS"

my expeirence on get code from github is,

git clone https://github.com/zhihual/doc.git

A great example of using forks to propose changes is for bug fixes. Rather than logging an issue for a bug you've found, you can:

Fork the repository.
Make the fix.
Submit a pull request to the project owner.

Clone https://github.com/zhihual/StockTrader.git as one focus projects

GIT 123 

初始化一个Git仓库，使用git init命令。
添加文件到Git仓库，分两步：
第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；
第二步，使用命令git commit，完成。 git commit -m

git status
git diff
git log --pretty=oneline
git reflog
git reset --hard commit_id

我使用git commit --amend已经push过的可以改last commit comment

第一次修改 -> git add -> 第二次修改 -> git commit

add only put your changes into track, but, not add change not in track.
git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别


git checkout -- readme.txt 就是让这个文件回到最近一次git commit或git add时的状态。


git reset HEAD file can del change in cache, but you still need use git checkout to reserve to factory file.

git rm is use for del file.
If you del file by mistak, use git checkout -- filename can recover it.

查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

if git merge has confilt, that means both branch has itself check-in, then, we need modify manuual, 
and git add and git commit again.  finally, git branch -d branchname


Ways to handle not complete code, but need create new branch to fix bug
一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
另一种方式是用git stash pop，恢复的同时把stash内容也删了：
git stash apply stash@{0}

git branch -D <name>强行删除 force remove one branch


Push general way

查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。


Tag should be same as p4
命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
git tag -a <tagname> -m "blablabla..."可以指定标签信息；
git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
命令git tag可以查看所有标签。


命令git push origin <tagname>可以推送一个本地标签；
命令git push origin --tags可以推送全部未推送过的本地标签；
命令git tag -d <tagname>可以删除一个本地标签；
命令git push origin :refs/tags/<tagname>可以删除一个远程标签。

Ignore files

在Git工作区的根目录下创建一个特殊的.gitignore文件
忽略某些文件时，需要编写.gitignore；

git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s%Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。
配置文件放哪了？每个仓库的Git配置文件都放在.git/config文件中：
.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！


Website for US news
http://www.sandiegouniontribune.com/news/2015/dec/04/qualcomm-irwin-jacob-uscd-mollenkopf/

2015-12-10

用户 可以把所有的代码编译进内核，但是这样会引起两个问题：一是内核过大；二是 当需要添加或者删除内核时，需要重新再编译内核。所以有了内核模块的概念。 模块并不编译到内核中，编译后存放在指定的目录，当需要使用时动态加载

printk与printf的用法是差不多的，最大的区别就是printk可以指定打印的优先 级。另外一个区别就是，printf只用在用户态，printk用于内核态。

printk("hello world!\n");
printk("<0>" "hello world! 0\n");

1 #define KERN_EMERG "<0>" /* system is unusable */
92 #define KERN_ALERT "<1>" /* action must be taken immediately */
93 #define KERN_CRIT "<2>" /* critical conditions */
94 #define KERN_ERR "<3>" /* error conditions */
95 #define KERN_WARNING "<4>" /* warning conditions */
96 #define KERN_NOTICE "<5>" /* normal but significant condition */
97 #define KERN_INFO "<6>" /* informational */
98 #define KERN_DEBUG "<7>" /* debug-level messages */

47 /* printk's without a loglevel use this.. */
48 #define DEFAULT_MESSAGE_LOGLEVEL 4 /* KERN_WARNING */

Mandatory 
23 module_init(test_init);
24 module_exit(test_exit);
25
26 MODULE_LICENSE("GPL");
27 MODULE_AUTHOR("xiao bai");
28 MODULE_onsole_loglevel


[root: /]# cat /proc/sys/kernel/printk
7 4 1 7
7 4 1 7分别是：
7：console_loglevel	//这个就是控制台的默认优先级
4：default_message_loglevel	// 这个是printk的默认输出优先级
1：minimum_console_level
7：default_console_loglevel


4 4 1 7


module_param(name, type, perm)
name：内核参数的名称，自己定义；
type：内核参数的类型，常见的类型byte、short、int、long、ulong、bool 、charp(字符指针);
perm：内核参数的权限S_IRUGO(对模块参数具有读权限)。其实权限和文件的 权限差不多，具体可以查看"include/linux/stat.h"。

int a=0;
module_paaram(a, int, 0644);

使用命令：insmod xxx.ko a=1
如果加载模块时不指定参数，模块会使用默认值0，否则会使用1


21 module_param(num, int, 0644);
22 module_param(name, charp, 0644);


导出符号表是指，在定义一个函数后，在模块中使用语句"EXPORT_SYMBOL(xxxxx)" 将函数导出。通过这样，内核就知道了该函数和在内存中对应的地址，这样模块 就可以调用导出的函数了。在"/proc/kallsyms"文件中对应这符号表，它记录了函数的符号和函数在内存所在的地址。


最终会生成两个文件，一个是core目录下的haha.ko，一个是driver目录下的 test.ko。这两个文件的加载也要讲究顺序。
如果先加载test.ko的话会出错：

加载了test.ko时，haha模块产生了变化，如果卸载的时候先卸载haha 是不可以的，因为它还被人引用，必须先卸载test。

1)字符设备：在今后的接触的大多数都是字符设备，我也只学过这个。
2)块设备 ：与硬盘相关的设备。
3)网络设备：与网络相关的设备。


设备号由主设备号和次设备号组成。linux下，一切设备皆文件，所有的设备都能在/dev目录下找到相应的文件。这些文件除了名字不一样以外，还每个设备文件都有不一样的设备号

在内核中，设备号用dev_t类型表示：
/*include/linux/coda.h*/
75 typedef unsigned long u_long;
..............
79 typedef u_long dev_t;

/*/include/linux/kdev_t.h*/
4 #define MINORBITS 20
5 #define MINORMASK ((1U << MINORBITS) - 1)
6
7 #define MAJOR(dev) ((unsigned int) ((dev) >> MINORBITS))
8 #define MINOR(dev) ((unsigned int) ((dev) & MINORMASK))
9 #define MKDEV(ma,mi) (((ma) << MINORBITS) | (mi))

ls -l /dev/

在驱动函数中，加载函数至少要执行两步的操作：
1)设备号的申请，让内核分配一个设备号给设备驱动，申请后最直接的效果就是在/proc/devices目录下能够查看到，具体能看到什么下面会说。
2)设备的注册，让内核知道用什么函数来操作设备。

上面的一个函数就实现了两个功能：
1)为驱动程序分配了一个设备号。
2)通过了file_operations告诉了内核能够用操作驱动的函数。


5 unsigned int major = 253;	//定义设备号
6 struct file_operations test_fops;	//定义文件操作的结构体

10 register_chrdev(major, "test_driver", &test_fops);

撇开文件操作结构体不说，效果是出来了，当调用命令"cat proc/devices"时显示了我申请的设备号253，显示的名字是"test_driver"。还有我们看不到的是，注册成功后，一个在内核中维护设备号和文件操作结构体file_operations的表添加了一项对应关系，这样内核就知道了这个设备号的驱动是用什么样的函数操作。

对应的，模块卸载时需要把设备号注销：


谨记，无论使用上面的哪种方式申请注册号，在模块卸载时都要释放设备号
void unregister_chrdev_region(dev_t from, unsigned count)
使用：释放从from开始count个设备号。
void unregister_chrdev(unsigned int major, const char *name)

QMSK

/*/include/linux/cdev.h*/
12 struct cdev {
13 struct kobject kobj;
14 struct module *owner;	//一般初始化为THIS_MODULE
15 const struct file_operations *ops;	//文件操作结构体
16 struct list_head list;
17 dev_t dev;	//设备号
18 unsigned int count;	//添加的设备个数
19 };

1)分配cdev；
2)初始化cdev；
3)添加cdev；

方法一：直接定义：
struct cdev test_cdev;
方法二：调用函数:struct cdev* cdev_alloc(void)
struct cdev* test_cdev;
test_cdev = cdev_alloc();

3.2.2初始化cdev：
将文件操作结构体添加到cdev中：
void cdev_init(struct cdev *cdev, const struct file_operations *fops)
参数：
cdev：之前我定义的cdev结构体；
fops：设备对应的文件操作结构体。
返回值：(函数有可能失败，查看返回值是必须的)
成功返回0，示范返回对应的错误码

加载模块：
1）申请一个设备号，下面注册设备时需要用。
2）注册设备。
2.1分配一个cdev结构体。
2.2初始化cdev结构体，使结构体与文件操作结构体(fops)对应起关系。
2.3添加cdev结构体到内核。
卸载模块：
1)注销设备，即从内核中删除指定的cdev。
2)注销设备号。

一、文件操作结构体file_operations
struct file_operations {
1311 struct module *owner;
1312 loff_t (*llseek) (struct file *, loff_t, int);
1313 ssize_t (*read) (struct file *, char __user *, size_t, loff_t *);
1314 ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *);
1315 ssize_t (*aio_read) (struct kiocb *, const struct iovec *, unsigned long, loff_t);
1316 ssize_t (*aio_write) (struct kiocb *, const struct iovec *, unsigned long, loff_t);
1317 int (*readdir) (struct file *, void *, filldir_t);
1318 unsigned int (*poll) (struct file *, struct poll_table_struct *);
1319 int (*ioctl) (struct inode *, struct file *, unsigned int, unsigned long);
1320 long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long);
1321 long (*compat_ioctl) (struct file *, unsigned int, unsigned long);
1322 int (*mmap) (struct file *, struct vm_area_struct *);
1323 int (*open) (struct inode *, struct file *);
1324 int (*flush) (struct file *, fl_owner_t id);
1325 int (*release) (struct inode *, struct file *);
1326 int (*fsync) (struct file *, struct dentry *, int datasync);
1327 int (*aio_fsync) (struct kiocb *, int datasync);
1328 int (*fasync) (int, struct file *, int);
1329 int (*lock) (struct file *, int, struct file_lock *);
1330 ssize_t (*sendpage) (struct file *, struct page *, int, size_t, loff_t *, int);
1331 unsigned long (*get_unmapped_area)(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
1332 int (*check_flags)(int);
1333 int (*flock) (struct file *, int, struct file_lock *);
1334 ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
1335 ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned i nt);
1336 int (*setlease)(struct file *, long, struct file_lock **);
1337 };


二、内核中的memcpy---copy_from_user和copy_to_user：


下面用用file_operations中的read和write模拟两件事：
1)从内核态通过read函数读取数据到用户态。
2)从用户态通过write函数读取数据到内核态。

驱动函数：ssize_t (*read) (struct file *, char __user *, size_t, loff_t *);
与用户层的read对应：ssize_t read(int fd, void *buf, size_t count);

int (*ioctl) (struct inode * node, struct file *filp, unsigned int cmd, unsigned long arg)


一个cmd被分为了4个段，每一段都有各自的意义，cmd的定义在据大小





ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *);
与用户层的write对应：ssize_t write(int fd, const void *buf, size_t count);

static inline unsigned long __must_check copy_to_user(void __user *to, const void *from, unsigned long n)
static inline unsigned long __must_check copy_from_user(void *to, const void __user *from, unsigned long n)

\\10.231.198.24\wifi\WiFi_WHQL_Test\WHQL_tool\window7_dump\x64 --win7 dump patch


1)struct file
在内核中，file结构体是用来维护打开的文件的。每打开一次文件，内核空间里就
会多增加一个file来维护，当文件关闭是释放。
所以，在内核中可以存在同一个文件的多个file，因为该文件被应用程序打开被打
开。


2)struct inode
这个结构体是用来保存一个文件的基本信息的结构体，即使打开多个相同的文件，也只会有一个对应的inode。
它也有两个常用的成员：


1)封装了一个结构体。
2)open函数要获得结构体并存放到private_data中。
3)read和write函数成功后要更新cur_size这个值。


既然内核这样定义cmd，就肯定有方法让用户方便定义：
_IO(type,nr)	//没有参数的命令
_IOR(type,nr,size)	//该命令是从驱动读取数据
_IOW(type,nr,size)	//该命令是从驱动写入数据
_IOWR(type,nr,size)	//双向数据传输
上面的命令已经定义了方向，我们要传的是幻数(type)、序号(nr)和大小(size)。在这里szie的参数只需要填参数的类型，如int，上面的命令就会帮你检测类型的正确然后赋值sizeof(int)。

有生成cmd的命令就必有拆分cmd的命令：
_IOC_DIR(cmd)	//从命令中提取方向
_IOC_TYPE(cmd)	//从命令中提取幻数
_IOC_NR(cmd)	//从命令中提取序数
_IOC_SIZE(cmd)	//从命令中提取数据大小

一般会有两种的传参方法：
1)整数，那可是省力又省心，直接使用就可以了。
2)指针，通过指针的就传什么类型都可以了，当然用起来就比较烦。

二、阻塞型IO的实现：

/*linux/wait.h*/
50 struct __wait_queue_head {
51 spinlock_t lock;	//这个是自旋锁，在这里不需要理会。
52 struct list_head task_list;	//这就是队列头中的核心，链表头。
53 };
54 typedef struct __wait_queue_head wait_queue_head_t;

wait_queue_head_t test_queue; //1、定义等待队列头

49 /*休眠*/
50 P_DEBUG("read data.....\n");
51 if(wait_event_interruptible(dev->test_queue, dev->cur_size > 0))
52 return - ERESTARTSYS;

77 /*唤醒*/
78 wake_up_interruptible(&dev->test_queue);


118 /*初始化等待队列头，注意函数调用的位置*/
119 init_waitqueue_head(&my_dev.test_queue);


5.阻塞型IO实现 

定义并初始化队列头有两种方法：
1）静态定义并初始化，一个函数执行完两个操作。省力又省心。
DECLARE_WAIT_QUEUE_HEAD(name)
使用：定义并初始化一个叫name的等待队列。
2）分开两步执行。
2.1）定义
wait_queue_head_t test_queue;
2.2）初始化
init_waitqueue_head(&test_queue);


6. 非阻塞型操作的实现

实现非阻塞操作也很简单，判断filp->f_flags中的是否存在O_NONBLOCK标志（标志在定义，并被自动包含），如果有就返回-EAGAIN。

49 if(filp->f_flags & O_NONBLOCK)
50 return - EAGAIN;

获得当前正在进行的进程进程描述符也很简单，使用全局项current就可以获得。
/*4th_mutex/4th_mutex_1/1st/test.c*/
113 P_DEBUG("[%s]:pid[%d]\n", current->comm, current->pid);

1）TASK_RUNNING（运行）：该状态出现在进程正在运行，或者已经放在运行队列中等待执行（对应操作系统原理上所说的就绪状态）。这里要注意的是等待执行和休眠是两码事。
2）TASK_INTERRUPTIBLE（可中断休眠）：这就是休眠状态中一种，之所以说可中断，就是说除了可以被其他进程从等待队列唤醒以外，还可以接送到信号而唤醒，这是常用的休眠状态。
3）TASK_UNINTERRUPTIBLE（不可中断休眠）：这就是休眠状态的另一种，只能从等待队列被唤醒。因为它如此霸道，所以很少有人使用。
4）TASK_ZOMBIE（僵死）：这种情况出现在进程结束后，但父进程还有来回收该进程的进程描述符。
5）TASK_STOPPED（停止）：一看就知道，进程停止执行


四、进程的创建
进程的创建一般分两步：

1、调用fork()：

在不修改资源的情况下，fork()的实际开销就两样：
1）复制父进程的页表给子进程。大家应该都知道，linux内存管理使用的页式管理，只要也就是说，只要把父进程的页表复制给子进程，子进程就能在页表中找到与父进程共享的4G虚拟地址了。
2）为子进程创建唯一的进程描述符。这个就不用解释了，进程与进程描述符是一一对应的。

fork具体调用的什么函数我就不详细说了，不过应该有这样的一个概念：
fork->clone->do_fork()->copy_procrss：

fork()系统调用根据提供的参数调用clone()，然后clone()去调用do_fork()，其中do_fork中完成了创建的大部分操作，里面有一个主要的函数copy_process()。


2、调用exec()：
一般的，创建的子进程都不是为了完成父进程中的任务，而是需要执行新的任务。exec()的作用就是读取可执行文件并加载到地址空间开始运行，可以类比成命令”./xxxxx”。如果fork()后子进程调用exec()执行新的代码，就不需要拷贝父进程的资源了。所以，一般fork()之后都是子进程先运行。

7.异步通知fasync 

其实就三个步骤：
1）signal(SIGIO, sig_handler);
调用signal函数，让指定的信号SIGIO与处理函数sig_handler对应。
2）fcntl(fd, F_SET_OWNER, getpid());
指定一个进程作为文件的“属主(filp->owner)”，这样内核才知道信号要发给哪个进程。
3）f_flags = fcntl(fd, F_GETFL);
fcntl(fd, F_SETFL, f_flags | FASYNC);
在设备文件中添加FASYNC标志，驱动中就会调用将要实现的test_fasync函数。
三个步骤执行后，一旦有信号产生，相应的进程就会收到

简单来说，select这个系统调用的作用就是在应用层调用驱动函数中的poll来检测指定的文件的状态（读、写和异常）。如果某个状态满足，select函数调用成功后返回，应用程序就可以通过指定的函数来判断现在的文件状态。注意的是：select可以指定判断的时间，指定时间内，应用程序会阻塞在select函数，直到状态满足或者超时。

对应设备的状态，返回相应的掩码。那就是说，如果设备可读，那就返回可读的掩码。
什么是掩码？有什么掩码？
掩码
含义
POLLIN
设备可读。
POLLRDNORM
数据可读。一般的，驱动可读，返回(POLLIN|POLLRDNORM)，当然，只返回POLLIN也行，因为意思其实都可不多
POLLOUT
设备可写
POLLWRNORM
数据可写。一般的，驱动可写，返回(POLLOUT|POLLWRNORM)，当然，只返回POLLOUT也行，因为意思其实都可不多





2015-12-10 10:48 
Start to find or write one linux driver sample with application test code.

Target to learn app and driver basic coding style

. URL about sample link
http://stackoverflow.com/questions/2142598/where-can-i-find-sample-source-files-for-linux-device-drivers-third-edition
http://www.linux.org/threads/the-linux-kernel-drivers.4205/
http://www.codeproject.com/Articles/112474/A-Simple-Driver-for-Linux-OS



…or create a new repository on the command line

echo # sampledrv >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/zhihual/sampledrv.git
git push -u origin master
…or push an existing repository from the command line


git remote add origin https://github.com/zhihual/sampledrv.git
git push -u origin master
…or import code from another repository

You can initialize this repository with code from a Subversion, Mercurial, or TFS project.

git remote -v
and git remote rm can remove cached URL link

https://github.com/zhihual/sampledrv.git

Finally find kernel headfile path
/lib/modules/$(KERNELDIR)/build M=$(PWD) modules  /usr/src/linux-headers-3.10.0+


http://blog.csdn.net/henni386/article/details/7442872   introduce on syslog

cat /proc/kmsg?

2015/12/11

Linux操作系统中模块操作相关命令解释
lsmod? 查看已经安装好的模块， 也可以查看/proc/modules文件的内容. 实际上,lsmod读命令就是通过查看/proc/modules的内容来显示模块信息的.
modinfo 显示模块信息
modprobe? 不需要指定路径，它会到默认路径下寻找模块。模块也存在依赖性问题: 比如你要加载msdos.ko, 需要先加载fat.ko. modprobe查看/lib/module/version/modules.dep得知模块的依赖关系
rmmod 卸载模块，但是内核会认为卸载模块不安全，可以添加命令强制卸载。
depmod 检查系统中模块之间的依赖关系，并把依赖关系信息存于/lib/modules/2.6.18-1.2798/modules.dep中。 一般加载模块后，要命令行下先执行 depmod -a后，在系统加载模块时候会查看modules.dep中模块依赖及路径信息，这样子才可以成功加载需要模块。
insmod 加载模块，需要指定完整的路径和模块名字。

坑爹的编译器，一个moudle宏大字母没写对，编译通过，可以加载，就是不调入口函数。坑了爹两个小时

在/etc/vim/vimrc 里面把dark background 打开，显示效果就会很好

gcc -C app.c -o apip can make one simple application

mknod /dev/hello c 247 0  2 hours knowledge


2015-12-12

切换到root
sudo passwd root 就可以设置root密码了

smba setup
1. apt-get installer samba
2. vim /etc/samb/smb.conf
3. smbpassword -a username
4. service smbd restart  
OK, done!

为毛搞状况，搞一个多小时

为啥故意把module搞挂，系统不会完全挂掉？

找头文件
grep copy_to_user * -R | grep int > search_result 

ping ip -l 30000 可以用来发大包

12-17

登录linux seriver的时候遇到问题Publick key denny.   
可以在/var/log/auth.log去查找 security 方面的log

sudo 会把账户切到root,变量应该也切过去，所以要注意。


git cherry-pick用于把另一个本地分支的commit修改应用到当前分支。

HEAD names the commit on which you based the changes in the working tree.
FETCH_HEAD records the branch which you fetched from a remote repository with your last git fetch invocation.
ORIG_HEAD is created by commands that move your HEAD in a drastic way, to record the position of the HEAD before their operation, so that you can easily change the tip of the branch back to the state before you ran them.
MERGE_HEAD records the commit(s) which you are merging into your branch when you run git merge.
CHERRY_PICK_HEAD records the commit which you are cherry-picking when you run git cherry-pick.

HEAD 里面其实存了一个指针

git fetch ssh:: && git checkout FETCH_HEAD  // fetch then, make fetch_head as workspace  
git fetch ssh:: && git cherry-pick  FETCH_HEAD // fetch another branch, then, merge the commit into workspace.  FETCH_HEAD in two command are changed twices.

history -- linux command to save log

.vim/log save the log which impact brach.

/home/zliu/.vnc/xstartup change resoution. 

vncserver - ill can destory session

getpid, getppid - get process identification

signal()函数理解
在<signal.h> 这个头文件中。
signal（参数1，参数2）；
参数1：我们要进行处理的信号。系统的信号我们可以再终端键入 kill -l查看(共64个)。其实这些信号时系统定义的宏。
参数2：我们处理的方式（是系统默认还是忽略还是捕获）。

UDEV 通过查找 /lib/modules/uname-r /modules.alias 知道设备名。 还是通过HW ID来查找的。

在模块安装的时候，depmod会根据模块中的rtl8139_pci_tbl的信息，生成下面的信息，保存到/lib/modules/uname-r /modules.alias 文件中，其内容如下：
/var/log/syslog
/lib/udev/rules.d // find rules here
/etc/udev/udev.conf // change udev output level

/lib/modules/uname -r/modules.alias // looking for moudle name

http://blog.sina.com.cn/s/blog_46c4c6ce0100wgtj.html   netlink kernel message handle. 

http://man.linuxde.net/modprobe linux command user guide

http://blog.csdn.net/haomcu/article/details/7371835 netlink guide


Build WLAN host
? USB-x86 32bit Build Command:
make CONFIG_ROME_IF=usb

WPA Supplicant

wpa_supplicant -d -Dwext -i wlan0 -c /data/misc/wifi/wpa_supplicant.conf -t -d /data/misc/wifi/log.txt

https://pip.pypa.io/en/stable/installing/#install-pip

download get-pip.py

run as administrator in cmdline

python get-pip.py

pip list will show you pip status

install http://pandas.pydata.org/


http://hao.199it.com/jrsj.html  大金融数据

Install anaconda

pip install tushare

Ok, tushare is running now...

KMSpico win10 office 2013 active solution tool


12/22

12/27

How to insall chinese language in ubuntu 14.04
step1 find googlepinyin engine for ibus in unbuntu software center and install
after stpe 2, looks no hint in explore. try to reboot


after reboot, looks can't enable, stop here, and keep investigation

change termial profile and background successfully.  Just in edit and change default profile
Cool!

How to mount and unmount?  This is one open question.

Setup tushare envirmont. 3rd time

step 1. install since tool set by script +x
step 2. pip install tushare. note: maybe need restart terminal to invole new path
step 3. done!

if installed complete, just enter phyton enviorment and import tushare as ts,

then, you can use ts command to get data

12/18 
step 1
try to build fw
note: already setup ftp servier. can use this to transfer files

!ls is one ftp server, which can check local file

filezila is one free ftp tool

build fw success. cool! replacement in windows, all running

replace firmware in /lib/firmware, and insmod in linux enviorment. done. OK!


step 2, setup git enviorment

Done. Should use git before first build. 
Add ignore file can make git after build finished.

Tiger captured LE logs. which confirm our expecation

Step3 :  check FW bundle, possilbe to add debug message.
How to enable fw log in linux?

Look at ini config file, we can see how to enable

Rx bundle

   1. receive message,  get max bundle rx

12/30

USB bundle doesn't set flag
Max bundle number is 8
need more to make package bundled





netdevice.h
wext.h --> define IOCTL of linux driver
wireless -> define API of linux driver
iw_hander-> start point of API and IOCTL 


wlan_hdd_wext.c is the HDD layer main function.

netlink: wlan_nlink_common.h  looks netlink is one socket interface

nl_srv_register

step 1: define netlink_kernel_cfg cfg
step 2: call netlink_kernel_create to hook netlink socket

end: call netlink_kernel_release to release netlink socket

nl_srv_rcv is to get message

nl_srv_ucast and nl_srv_bcast use netlink_unicast, netlink_broadcast to send message

lwan_nlink_common.h define netlink message 
http://www.cnblogs.com/iceocean/articles/1594195.html

in current code, looks use this as BTC event indication

Netlink 是一种在内核与用户应用间进行双向数据传输的非常好的方式，用户态应用使用标准的 socket API 就可以使用 netlink 提供的强大功能，内核态需要使用专门的内核 API 来使用 netlink。

1，为了使用 netlink，用户仅需要在 include/linux/netlink.h 中增加一个新类型的 netlink 协议定义即可， 如 #define NETLINK_MYTEST 17 然后，内核和用户态应用就可以立即通过 socket API 使用该 netlink 协议类型进行数据交换。但系统调用需要增加新的系统调用，ioctl 则需要增加设备或文件， 那需要不少代码，proc 文件系统则需要在 /proc 下添加新的文件或目录，那将使本来就混乱的 /proc 更加混乱。

2. netlink是一种异步通信机制，在内核与用户态应用之间传递的消息保存在socket缓存队列中，发送消息只是把消息保存在接收者的socket的接 收队列，而不需要等待接收者收到消息，但系统调用与 ioctl 则是同步通信机制，如果传递的数据太长，将影响调度粒度。

3．使用 netlink 的内核部分可以采用模块的方式实现，使用 netlink 的应用部分和内核部分没有编译时依赖，但系统调用就有依赖，而且新的系统调用的实现必须静态地连接到内核中，它无法在模块中实现，使用新系统调用的应用在编译时需要依赖内核。

4．netlink 支持多播，内核模块或应用可以把消息多播给一个netlink组，属于该neilink 组的任何内核模块或应用都能接收到该消息，内核事件向用户态的通知机制就使用了这一特性，任何对内核事件感兴趣的应用都能收到该子系统发送的内核事件，在 后面的文章中将介绍这一机制的使用。

5．内核可以使用 netlink 首先发起会话，但系统调用和 ioctl 只能由用户应用发起调用。

6．netlink 使用标准的 socket API，因此很容易使用，但系统调用和 ioctl则需要专门的培训才能使用。


/lib/modules/3.10.0+/build/include/uapi/linux/netlink.h:#define NETLINK_USERSOCK        2       /* Reserved for user mode socket protocols      */
/lib/modules/3.10.0+/build/include/uapi/linux/if_ether.h:#define ETH_P_ALL      0x0003          /* Every packet (be careful!!!) */
grep: /lib/modules/3.10.0+/build/include/asm: No such file or directory

http://blog.csdn.net/liuxd3000/article/details/23761663

/lib/modules/3.10.0+/build/include/net/cfg80211.h
wiphy_register 

cfg80211_ops by cfg80211 moudle

wlan_hdd_cfg80211_ops -- function array


register_netdevice(pWlanDev) -- datapath is net_device

// function pointer
static struct net_device_ops wlan_drv_ops
static const iw_handler      we_handler[]
static const iw_handler we_private[] = {
wlan_hdd_cfg80211_ops

netif_rx_ni

file /sbin/init   用来查看系统32 or 64 bit

vsftp to use ftp as file transfer


1/7

dmidecode | grep "Product Name" can check platform modle name
cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c  can check CPU info

lsusb can check usb port 2.0 or 3.0

=======
1-7 

upgrade and check tushare version
pip install tushare --upgrade
import tushare
print(tushare.__version__)


USB1.1 12Mbps 
USB2.0 480Mbps
USB3.0 5Gbps

USB2.0 real test data is 30MB/s, aka 240Mbps

微软目前放出一个补丁来提高USB设备的访问速度，由于它是一个HotFix热修复补丁，并没有作为常规补丁随系统自动更新，因此我们平时也就体会不到它的作用，那么我们可以自己来手动下载安装。
Windows6.1-KB2581464

USB2.0的最高传输速率为480Mbps，即60MB/s。不过，大家要注意这是理论传输值，如果几台设备共用一个USB通道，主控制芯片会对每台设备可支配的带宽进行分配、控制。如在USB1.1中，所有设备只能共享1.5MB/s的带宽。如果单一的设备占用USB接口所有带宽的话，就会给其他设备的使用带来困难。

why can't we try win10?

1-13

use usb_disable_lpm bus_to_hcd to change caps

XHC_LPM_SUPPORT

/include/linux/usb/hcd.h
/drivers/usb/host/xhci-pci.c
